"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, Download, Activity, User, Clock } from "lucide-react"
import type { ActivityLog, User as UserType } from "@/pages/Dashboard"

interface ActivityLogsProps {
  logs: ActivityLog[]
  users: UserType[]
}

const ActivityLogs = ({ logs, users }: ActivityLogsProps) => {
  const [searchTerm, setSearchTerm] = useState("")
  const [userFilter, setUserFilter] = useState<string>("all")
  const [actionFilter, setActionFilter] = useState<string>("all")
  const [dateFilter, setDateFilter] = useState<string>("all")
  const [currentPage, setCurrentPage] = useState(1)
  const itemsPerPage = 20

  const actionTypes = [
    "all",
    ...Array.from(new Set(logs.map((log) => log.action))).sort(),
  ]

  const getActionColor = (action: string) => {
    switch (action) {
      case "ORDER_CREATED":
        return "bg-blue-100 text-blue-800"
      case "ORDER_UPDATED":
        return "bg-purple-100 text-purple-800"
      case "PAYMENT_CONFIRMED":
        return "bg-green-100 text-green-800"
      case "PACKAGER_ASSIGNED":
        return "bg-orange-100 text-orange-800"
      case "ORDER_PACKAGED":
        return "bg-pink-100 text-pink-800"
      case "ITEMS_RELEASED":
        return "bg-indigo-100 text-indigo-800"
      case "USER_CREATED":
        return "bg-emerald-100 text-emerald-800"
      case "USER_UPDATED":
        return "bg-yellow-100 text-yellow-800"
      case "CHANGE_SUBMITTED":
        return "bg-gray-100 text-gray-800"
      case "CHANGE_APPROVED":
        return "bg-green-100 text-green-800"
      case "CHANGE_REJECTED":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const filteredLogs = logs.filter((log) => {
    const matchesSearch =
      log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||
      log.details.toLowerCase().includes(searchTerm.toLowerCase()) ||
      log.username.toLowerCase().includes(searchTerm.toLowerCase())

    const matchesUser = userFilter === "all" || log.username === userFilter

    const matchesAction = actionFilter === "all" || log.action === actionFilter

    const matchesDate = (() => {
      if (dateFilter === "all") return true
      const logDate = new Date(log.timestamp)
      const today = new Date()

      switch (dateFilter) {
        case "today":
          return logDate.toDateString() === today.toDateString()
        case "week":
          const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000)
          return logDate >= weekAgo
        case "month":
          const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000)
          return logDate >= monthAgo
        default:
          return true
      }
    })()

    return matchesSearch && matchesUser && matchesAction && matchesDate
  })

  const totalPages = Math.ceil(filteredLogs.length / itemsPerPage)
  const startIndex = (currentPage - 1) * itemsPerPage
  const paginatedLogs = filteredLogs.slice(startIndex, startIndex + itemsPerPage)

  const exportToCSV = () => {
    const headers = ["Timestamp", "User", "Action", "Details", "IP Address"]
    const csvContent = [
      headers.join(","),
      ...filteredLogs.map((log) =>
        [
          log.timestamp.toISOString(),
          log.username,
          log.action,
          `"${log.details.replace(/"/g, '""')}"`,
          log.ipAddress || "",
        ].join(","),
      ),
    ].join("\n")

    const blob = new Blob([csvContent], { type: "text/csv" })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `activity-logs-${new Date().toISOString().split("T")[0]}.csv`
    a.click()
    window.URL.revokeObjectURL(url)
  }

  const getUserFullName = (username: string) => {
    const user = users.find((u) => u.username === username)
    return user ? user.fullName : username
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Activity Logs</h2>
          <p className="text-gray-600">Monitor all system activities and user actions</p>
        </div>
        <Button onClick={exportToCSV} variant="outline">
          <Download className="h-4 w-4 mr-2" />
          Export CSV
        </Button>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Total Activities</p>
                <p className="text-2xl font-bold">{logs.length}</p>
              </div>
              <Activity className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Today</p>
                <p className="text-2xl font-bold text-green-600">
                  {logs.filter((log) => log.timestamp.toDateString() === new Date().toDateString()).length}
                </p>
              </div>
              <Clock className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Active Users</p>
                <p className="text-2xl font-bold text-purple-600">
                  {new Set(logs.map((log) => log.username)).size}
                </p>
              </div>
              <User className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-gray-600">Order Activities</p>
                <p className="text-2xl font-bold text-orange-600">
                  {logs.filter((log) => log.action.includes("ORDER")).length}
                </p>
              </div>
              <Activity className="h-8 w-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="Search activities..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>

            <Select value={userFilter} onValueChange={setUserFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Filter by user" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Users</SelectItem>
                {users.map((user) => (
                  <SelectItem key={user.id} value={user.username}>
                    {user.fullName} (@{user.username})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Select value={actionFilter} onValueChange={setActionFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Filter by action" />
              </SelectTrigger>
              <SelectContent>
                {actionTypes.map((action) => (
                  <SelectItem key={action} value={action}>
                    {action === "all" ? "All Actions" : action.replace("_", " ")}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <Select value={dateFilter} onValueChange={setDateFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Filter by date" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Time</SelectItem>
                <SelectItem value="today">Today</SelectItem>
                <SelectItem value="week">Last 7 Days</SelectItem>
                <SelectItem value="month">Last 30 Days</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Results Summary */}
      <div className="flex items-center justify-between text-sm text-gray-600">
        <span>
          Showing {paginatedLogs.length} of {filteredLogs.length} activities
        </span>
        <span>Page {currentPage} of {totalPages}</span>
      </div>

      {/* Activity Table */}
      <Card>
        <CardContent className="p-0">
          <div className="border rounded-lg overflow-hidden">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Timestamp</TableHead>
                  <TableHead>User</TableHead>
                  <TableHead>Action\
